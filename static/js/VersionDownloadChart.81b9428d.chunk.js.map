{"version":3,"sources":["styles/VersionTooltip.module.scss","styles/VersionLegend.module.scss","chartColor.ts","styles/VersionDownloadChart.styles.ts","components/VersionTooltip.tsx","components/VersionDownloadChart.tsx","components/VersionLegend.tsx"],"names":["module","exports","styles","minLuminance","maxLuminance","saturation","defaultLightness","colorForHue","hue","opts","variant","lightness","h","s","contrastingColor","relativeLuminance","adjustLightnessForContrast","targetLuminance","hueDifference","hue1","hue2","Math","abs","l","r","g","b","c","x","m","r1","g1","b1","round","hsl2rgb","standardToLinear","pow","theme","unit","areaChart","margin","top","right","bottom","area","isAnimationActive","stroke","isInverted","palette","whiteTranslucent40","blackTranslucent40","responsiveContainer","width","height","grid","strokeDasharray","xAxis","tickLine","tickMargin","tick","fill","semanticColors","bodyText","yAxis","tickSize","tickCount","tooltip","animationDuration","animationEasing","offset","VersionTooltipContent","label","payload","versionHues","reversedItems","reverse","ThemeContext","Consumer","contextTheme","versionsList","length","className","map","entry","i","colorChipColor","name","color","formattedValue","count","measurementTransform","versionCounts","pct","Object","values","reduce","a","toLocaleString","formatCount","value","versionsListItem","versionColorIndicator","style","backgroundColor","Text","versionLabel","versionCount","ThemeProvider","frame","bodyBackground","date","unixTime","Date","toLocaleDateString","month","day","calculateDateTicks","dates","maxTicks","first","last","dataDuration","maxInteriorTicks","tickInterval","floor","ticks","Set","nextTick","fromDayStart","add","duration","dayStart","setHours","getTime","VersionDownloadChart","history","historyPoints","maxDaysShown","maxVersionsShown","showLegend","showTooltip","versionLabeler","tooltipTheme","styleProps","legendElement","setLegendElement","useState","n","windowInDays","points","latestDate","earliestAllowableDate","versionsInWindow","point","version","entries","existingCount","topVersions","sort","slice","_count","filteredPoints","topVersionsOnDate","keys","filter","v","has","filteredPoint","topVersion","push","versions","filterTopN","lastAvoidToken","areas","avoidToken","randomGenerator","randomSeed","create","triesRemaining","random","adjacentHue","allHues","find","otherHue","generateHue","dataKey","VersionLegend","versionsListContainer","colorVariant","ResponsiveContainer","AreaChart","data","reverseStackOrder","stackOffset","XAxis","type","scale","domain","tickFormatter","interval","p","YAxis","Tooltip","content","props","tooltipProps","Legend","createPortal","Area","key","datapoint","stackId","fillOpacity","CartesianGrid","ref","el"],"mappings":"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","file":"static/js/VersionDownloadChart.81b9428d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"frame\":\"VersionTooltip_frame__3Lv0n\",\"date\":\"VersionTooltip_date__1GwoG\",\"versionsList\":\"VersionTooltip_versionsList__6ks3l\",\"versionsListItem\":\"VersionTooltip_versionsListItem__1E-df\",\"versionColorIndicator\":\"VersionTooltip_versionColorIndicator__201KA\",\"versionLabel\":\"VersionTooltip_versionLabel__2ZozQ\",\"versionCount\":\"VersionTooltip_versionCount__2olVR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"versionsListContainer\":\"VersionLegend_versionsListContainer__2kfsM\",\"versionsList\":\"VersionLegend_versionsList__gyOfc\",\"versionsListItem\":\"VersionLegend_versionsListItem__2Sxmb\",\"versionColorIndicator\":\"VersionLegend_versionColorIndicator__L-tB-\",\"versionLabel\":\"VersionLegend_versionLabel__1tflT\"};","import randomSeed from \"random-seed\";\n\nexport type AvoidToken = {\n  adjacentHue: number;\n  allHues: number[];\n};\n\nconst styles = {\n  againstDark: {\n    minLuminance: 0.3,\n  },\n  againstLight: {\n    maxLuminance: 0.3,\n  },\n  dark: {\n    saturation: 0.5,\n    defaultLightness: 0.5,\n  },\n  light: {\n    saturation: 0.7,\n    defaultLightness: 0.6,\n  },\n};\n\n/**\n * Generates a hue with random distribution, stable for a given semver\n * version. Allows passing an `avoidToken` generated by a previous color, to avoid a color similar\n * to it.\n *\n * * Derived from:\n * - http://martin.ankerl.com/2009/12/09/how-to-create-random-colors-programmatically/\n * - https://github.com/devongovett/color-generator\n */\nexport default function generateHue(\n  version: string,\n  avoidToken?: AvoidToken\n): { hue: number; avoidToken: AvoidToken } {\n  const adjacentHueThreshold = 0.4;\n  const allHueThreshold = 0.06;\n\n  const goldenRatio = 0.618033988749895;\n\n  const randomGenerator = randomSeed.create(version);\n  let hue: number;\n  let triesRemaining = 100;\n\n  do {\n    hue = randomGenerator.random();\n    hue += goldenRatio;\n    hue %= 1;\n  } while (\n    avoidToken &&\n    --triesRemaining > 0 &&\n    (hueDifference(hue, avoidToken.adjacentHue) < adjacentHueThreshold ||\n      avoidToken.allHues.find(\n        // eslint-disable-next-line no-loop-func\n        (otherHue) => hueDifference(hue, otherHue) < allHueThreshold\n      ))\n  );\n\n  return {\n    hue: hue * 360,\n    avoidToken: {\n      adjacentHue: hue,\n      allHues: [...(avoidToken?.allHues ?? []), hue],\n    },\n  };\n}\n\n/**\n * Calculates a color with the given hue, optionally specified to meet a\n * specific contrast requirement\n */\nexport function colorForHue(\n  hue: number,\n  opts?: {\n    variant?: \"light\" | \"dark\";\n    targetLuminance?: \"contrasts-light\" | \"contrasts-dark\";\n  }\n) {\n  const saturation =\n    opts?.variant === \"dark\" ? styles.dark.saturation : styles.light.saturation;\n\n  const defaultLightness =\n    opts?.variant === \"dark\"\n      ? styles.dark.defaultLightness\n      : styles.light.defaultLightness;\n\n  const lightness = adjustLightnessForContrast(\n    defaultLightness,\n    hue,\n    saturation,\n    opts?.targetLuminance\n  );\n\n  return `hsl(${hue}, ${saturation * 100}%, ${lightness * 100}%)`;\n}\n\nfunction hueDifference(hue1: number, hue2: number) {\n  return Math.abs(((hue1 - hue2 + 0.5) % 1.0) - 0.5);\n}\n\nfunction adjustLightnessForContrast(\n  lightness: number,\n  h: number,\n  s: number,\n  contrastingColor?: \"contrasts-light\" | \"contrasts-dark\"\n) {\n  if (contrastingColor === \"contrasts-light\") {\n    while (\n      relativeLuminance(h, s, lightness) > styles.againstLight.maxLuminance\n    ) {\n      lightness -= 0.02;\n    }\n  } else if (contrastingColor === \"contrasts-dark\") {\n    while (\n      relativeLuminance(h, s, lightness) < styles.againstDark.minLuminance\n    ) {\n      lightness += 0.02;\n    }\n  }\n\n  return lightness;\n}\n\n/**\n * Calculate the relative luminance which is how bright the color is from the perspective of\n * a human eye.  Blue is much darker than green for instance so (0, 0, 255) is perceived to be\n * significantly darker than (0, 255, 0).  This is used to calculate contrast ratios between\n * two colors to ensure text is readable.\n */\nexport function relativeLuminance(h: number, s: number, l: number): number {\n  const { r, g, b } = hsl2rgb(h, s, l);\n\n  // Formula defined by: http://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html#contrast-ratiodef\n  // relative luminance: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n\n  // get the effective radius for each color\n  const r1 = standardToLinear(r / 255);\n  const g1 = standardToLinear(g / 255);\n  const b1 = standardToLinear(b / 255);\n\n  // relative luminance adjusts the R/G/B values by modifiers for their perceived brightness\n  // to produce lightness result for how the eye perceives the color\n  return 0.2126 * r1 + 0.7152 * g1 + 0.0722 * b1;\n}\n\n/**\n * Converts an r, g, or b value in the sRGB color space to the corresponding value in linearRGB\n * This is necessary for relative luminance calculations\n * Formula defined at https://en.wikipedia.org/wiki/SRGB\n *\n * @param c - one of r g or b coming from sRGB\n */\nfunction standardToLinear(c: number): number {\n  return c <= 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);\n}\n\nfunction hsl2rgb(\n  h: number,\n  s: number,\n  l: number\n): { r: number; g: number; b: number } {\n  const c: number = (1 - Math.abs(2 * l - 1)) * s;\n  const x: number = c * (1 - Math.abs(((h / 60) % 2) - 1));\n  const m: number = l - c / 2;\n\n  let r1: number = 0;\n  let g1: number = 0;\n  let b1: number = 0;\n\n  // different values of h\n  if (h < 60) {\n    r1 = c;\n    g1 = x;\n    b1 = 0;\n  } else if (h < 120) {\n    r1 = x;\n    g1 = c;\n    b1 = 0;\n  } else if (h < 180) {\n    r1 = 0;\n    g1 = c;\n    b1 = x;\n  } else if (h < 240) {\n    r1 = 0;\n    g1 = x;\n    b1 = c;\n  } else if (h < 300) {\n    r1 = x;\n    g1 = 0;\n    b1 = c;\n  } else {\n    r1 = c;\n    g1 = 0;\n    b1 = x;\n  }\n\n  return {\n    r: Math.round(255 * (r1 + m)),\n    g: Math.round(255 * (g1 + m)),\n    b: Math.round(255 * (b1 + m)),\n  };\n}\n","import { ITheme } from \"@fluentui/react\";\n\nimport type {\n  AreaProps,\n  CartesianGridProps,\n  ResponsiveContainerProps,\n  TooltipProps,\n  XAxisProps,\n  YAxisProps,\n} from \"recharts\";\nimport { Unit } from \"../components/VersionDownloadChart\";\n\ntype AnimationProps =\n  | \"animationDuration\"\n  | \"animationEasing\"\n  | \"isAnimationActive\";\ntype DimensionProps = \"width\" | \"height\";\ntype PaddingProps = \"padding\";\ntype StrokeProps = \"stroke\" | \"strokeDasharray\" | \"strokeOpacity\";\ntype TickProps =\n  | \"tick\"\n  | \"tickCount\"\n  | \"tickLine\"\n  | \"tickSize\"\n  | \"tickMargin\"\n  | \"minTickGap\";\n\nexport type VersionDownloadChartStyle = (opts?: {\n  theme?: ITheme;\n  unit?: Unit;\n}) => {\n  areaChart: {\n    margin?: { top?: number; right?: number; bottom?: number; left?: number };\n  };\n  area: Pick<AreaProps, AnimationProps | DimensionProps>;\n  responsiveContainer: Pick<ResponsiveContainerProps, DimensionProps>;\n  grid: Pick<CartesianGridProps, DimensionProps | StrokeProps>;\n  xAxis: Pick<XAxisProps, DimensionProps | PaddingProps | TickProps>;\n  yAxis: Pick<YAxisProps, DimensionProps | PaddingProps | TickProps>;\n  tooltip: Pick<TooltipProps<string, number>, AnimationProps | \"offset\">;\n};\n\nconst styles: VersionDownloadChartStyle = ({ theme, unit } = {}) => ({\n  areaChart: {\n    margin: { top: 15, right: 32, bottom: 5 },\n  },\n  area: {\n    isAnimationActive: false,\n    stroke: theme?.isInverted\n      ? theme.palette.whiteTranslucent40\n      : theme?.palette.blackTranslucent40,\n  },\n  responsiveContainer: {\n    width: \"100%\",\n    height: 220,\n  },\n  grid: {\n    stroke: theme?.isInverted\n      ? theme.palette.whiteTranslucent40\n      : theme?.palette.blackTranslucent40,\n    strokeDasharray: \"1 1\",\n  },\n  xAxis: {\n    height: 32,\n    tickLine: false,\n    tickMargin: 10,\n    tick: { fill: theme?.semanticColors.bodyText },\n  },\n  yAxis: {\n    width: 80,\n    tickLine: false,\n    tickMargin: 10,\n    tickSize: 0,\n    tickCount: 5,\n    tick: { fill: theme?.semanticColors.bodyText },\n  },\n  tooltip: {\n    animationDuration: 150,\n    animationEasing: \"linear\",\n    offset: 24,\n  },\n});\n\nexport default styles;\n","import styles from \"../styles/VersionTooltip.module.scss\";\nimport { ITheme, Text, ThemeContext, ThemeProvider } from \"@fluentui/react\";\n\nimport { TooltipProps } from \"recharts\";\nimport { Unit } from \"./VersionDownloadChart\";\nimport type { Payload } from \"recharts/types/component/DefaultTooltipContent\";\nimport { colorForHue } from \"../chartColor\";\n\ntype DateTooltipProps = TooltipProps<number, number>;\n\nfunction formatCount(\n  count: number,\n  entry: Payload<number, number>,\n  measurementTransform: Unit | undefined\n): string {\n  const { versionCounts } = entry.payload as {\n    versionCounts: Record<string, number>;\n  };\n\n  const totalCount = Object.values(versionCounts).reduce((a, b) => a + b, 0);\n\n  const pct = ((count as number) / totalCount) * 100;\n\n  if (measurementTransform === \"percentage\") {\n    return `${Math.round(pct * 100) / 100}%`;\n  } else {\n    return `${count.toLocaleString()} (${Math.round(pct)}%)`;\n  }\n}\n\nfunction formatLabel(unixTime: number): string {\n  return new Date(unixTime).toLocaleDateString(\"en-US\", {\n    month: \"short\",\n    day: \"numeric\",\n  });\n}\n\nexport function createTooltipContent(\n  props: VersionProps\n): React.FC<DateTooltipProps> {\n  return (tooltipProps) => (\n    <VersionTooltipContent {...props} {...tooltipProps} />\n  );\n}\n\nexport type VersionProps = {\n  versionHues: Record<string, number>;\n  unit?: Unit;\n  theme?: ITheme;\n};\n\nexport const VersionTooltipContent: React.FC<\n  VersionProps & DateTooltipProps\n> = ({ label, payload, unit, versionHues, theme }) => {\n  const reversedItems = [...(payload ?? [])];\n  reversedItems.reverse();\n\n  return (\n    <ThemeContext.Consumer>\n      {(contextTheme) => {\n        theme = theme ?? contextTheme;\n\n        const versionsList = reversedItems.length > 0 && (\n          <ul className={styles.versionsList}>\n            {reversedItems.map((entry, i) => {\n              const colorChipColor = theme\n                ? colorForHue(\n                    versionHues[entry.name!],\n                    theme.isInverted\n                      ? { variant: \"dark\", targetLuminance: \"contrasts-dark\" }\n                      : { variant: \"light\", targetLuminance: \"contrasts-light\" }\n                  )\n                : entry.color;\n\n              const formattedValue = formatCount(entry.value!, entry, unit);\n\n              return (\n                <li key={i} className={styles.versionsListItem}>\n                  <div\n                    className={styles.versionColorIndicator}\n                    style={{ backgroundColor: colorChipColor }}\n                  />\n                  <Text variant=\"small\" className={styles.versionLabel}>\n                    {entry.name}\n                  </Text>\n                  <Text variant=\"small\" className={styles.versionCount}>\n                    {formattedValue}\n                  </Text>\n                </li>\n              );\n            })}\n          </ul>\n        );\n\n        return (\n          <ThemeProvider\n            theme={theme}\n            className={styles.frame}\n            style={{\n              backgroundColor: (theme ?? contextTheme)?.semanticColors\n                .bodyBackground,\n            }}\n          >\n            <Text className={styles.date} variant=\"medium\">\n              {formatLabel(label!)}\n            </Text>\n            {versionsList}\n          </ThemeProvider>\n        );\n      }}\n    </ThemeContext.Consumer>\n  );\n};\n","import React, { useState } from \"react\";\n\nimport generateHue, { AvoidToken, colorForHue } from \"../chartColor\";\nimport styleProps from \"../styles/VersionDownloadChart.styles\";\nimport { createTooltipContent } from \"./VersionTooltip\";\n\nimport {\n  AreaChart,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  Legend,\n} from \"recharts\";\nimport type { HistoryPointCollection, HistoryPoint } from \"../HistoryReader\";\nimport { ITheme } from \"@fluentui/react\";\n\nimport { createPortal } from \"react-dom\";\nimport { createLegendContent } from \"./VersionLegend\";\n\nexport type Unit = \"totalDownloads\" | \"percentage\";\n\nexport type VersionLabeler = (version: string) => string;\n\nexport type VersionDownloadChartProps = {\n  /**\n   * Points to render\n   */\n  history: HistoryPointCollection;\n\n  /**\n   * Maximum duration the graph will show, in days\n   */\n  maxDaysShown?: number;\n\n  /**\n   * Maximum total ticks to show for dates/times\n   */\n  maxTicks?: number;\n\n  /**\n   * Maximum separate versions show, attempting to show most popular versions.\n   */\n  maxVersionsShown?: number;\n\n  /**\n   * Whether to show the legend (defaults to true)\n   */\n  showLegend?: boolean;\n\n  /**\n   * Whether to show the tooltip (defaults to true)\n   */\n  showTooltip?: boolean;\n\n  /**\n   * The unit to show in the Y axis\n   */\n  unit?: Unit;\n\n  /**\n   * Allows relabeling versions\n   */\n  versionLabeler?: VersionLabeler;\n\n  /**\n   * Theme, used to ensure we have enough contrast.\n   */\n  theme?: ITheme;\n\n  /**\n   * Override the default provided theme for the tooltip\n   */\n  tooltipTheme?: ITheme;\n};\n\nconst VersionDownloadChart: React.FC<VersionDownloadChartProps> = ({\n  history: historyPoints,\n  maxDaysShown,\n  maxVersionsShown,\n  maxTicks,\n  showLegend,\n  showTooltip,\n  unit,\n  versionLabeler,\n  theme,\n  tooltipTheme,\n}) => {\n  const styles = styleProps({ theme, unit });\n\n  const [legendElement, setLegendElement] = useState<HTMLDivElement | null>(\n    null\n  );\n\n  maxVersionsShown = maxVersionsShown ?? 5;\n  maxDaysShown = maxDaysShown ?? 30;\n  const history = filterTopN(historyPoints, maxVersionsShown, maxDaysShown);\n\n  const versionHues: Record<string, number> = {};\n  // Generate color from earlier versions to later\n  let lastAvoidToken: AvoidToken | undefined = undefined;\n  const areas = history.versions\n    .map((v) => {\n      const { hue, avoidToken } = generateHue(v, lastAvoidToken);\n      lastAvoidToken = avoidToken;\n      const name = versionLabeler ? versionLabeler(v) : v;\n      versionHues[name] = hue;\n      return { name, hue, dataKey: v };\n    })\n    .reverse();\n\n  if (history.points.length === 0) {\n    return null;\n  }\n\n  const VersionLegend = createLegendContent({ versionHues });\n  const colorVariant = theme?.isInverted ? \"dark\" : \"light\";\n\n  return (\n    <div>\n      <ResponsiveContainer {...styles.responsiveContainer}>\n        <AreaChart\n          {...styles.areaChart}\n          data={history.points}\n          reverseStackOrder\n          stackOffset={unit === \"percentage\" ? \"expand\" : \"none\"}\n        >\n          <XAxis\n            {...styles.xAxis}\n            dataKey=\"date\"\n            type=\"number\"\n            scale=\"time\"\n            domain={[\"dataMin\", \"dataMax\"]}\n            tickFormatter={(unixTime) =>\n              new Date(unixTime).toLocaleDateString(\"en-US\", {\n                month: \"short\",\n                day: \"numeric\",\n              })\n            }\n            interval={0}\n            ticks={calculateDateTicks(\n              history.points.map((p) => p.date),\n              maxTicks ?? 6\n            )}\n          />\n          <YAxis\n            {...styles.yAxis}\n            type=\"number\"\n            {...(unit === \"percentage\"\n              ? {\n                  domain: [0, 1],\n                  tickFormatter: (count) => `${Math.round(count * 100)}%`,\n                }\n              : {\n                  domain: [\"auto\", \"auto\"],\n                  tickFormatter: (count) => count.toLocaleString(),\n                })}\n          />\n\n          {showTooltip !== false && (\n            <Tooltip\n              {...styles.tooltip}\n              content={createTooltipContent({\n                versionHues,\n                unit,\n                theme: tooltipTheme,\n              })}\n            />\n          )}\n          {showLegend !== false && legendElement && (\n            <Legend\n              height={0}\n              content={({ payload }) =>\n                createPortal(\n                  payload && <VersionLegend payload={payload} />,\n                  legendElement\n                )\n              }\n            />\n          )}\n\n          {areas.map(({ name, hue, dataKey }) => (\n            <Area\n              {...styles.area}\n              name={name}\n              key={name}\n              dataKey={(datapoint) => datapoint.versionCounts[dataKey]}\n              stackId=\"1\"\n              fill={colorForHue(hue, {\n                variant: colorVariant,\n                targetLuminance: theme?.isInverted\n                  ? \"contrasts-light\"\n                  : \"contrasts-dark\",\n              })}\n              fillOpacity={1}\n            />\n          ))}\n\n          <CartesianGrid {...styles.grid} />\n        </AreaChart>\n      </ResponsiveContainer>\n      <div ref={(el) => setLegendElement(el)} />\n    </div>\n  );\n};\n\nfunction calculateDateTicks(dates: number[], maxTicks: number): number[] {\n  if (maxTicks === 0) {\n    return [];\n  }\n\n  const first = dates[0];\n  const last = dates[dates.length - 1];\n\n  if (maxTicks === 1) {\n    return [first];\n  }\n\n  if (maxTicks === 2) {\n    return [first, last];\n  }\n\n  const dataDuration = last - first;\n  const dayDuration = 24 * 60 * 60 * 1000;\n  const weekDuration = 7 * dayDuration;\n\n  const maxInteriorTicks = maxTicks - 1;\n  let tickInterval = weekDuration;\n  while (Math.floor(dataDuration / tickInterval) > maxInteriorTicks) {\n    tickInterval *= 2;\n  }\n\n  const ticks = new Set([first]);\n  let nextTick = fromDayStart(first, tickInterval);\n\n  for (const date of dates) {\n    if (date >= nextTick) {\n      ticks.add(date);\n      nextTick = fromDayStart(date, tickInterval);\n    }\n  }\n\n  return [...ticks];\n}\n\nfunction fromDayStart(date: number, duration: number): number {\n  const dayStart = new Date(date);\n  dayStart.setHours(0, 0, 0, 0);\n\n  return dayStart.getTime() + duration;\n}\n\nfunction filterTopN(\n  history: HistoryPointCollection,\n  n: number,\n  windowInDays: number\n): HistoryPointCollection {\n  if (history.points.length === 0) {\n    return history;\n  }\n\n  const latestDate = history.points[history.points.length - 1].date;\n  const latestDay = new Date(latestDate).setHours(0, 0, 0, 0);\n\n  const earliestAllowableDate = latestDay - windowInDays * 24 * 60 * 60 * 1000;\n  const versionsInWindow: { [version: string]: number | undefined } = {};\n\n  for (const point of history.points) {\n    if (point.date >= earliestAllowableDate) {\n      for (const [version, count] of Object.entries(point.versionCounts)) {\n        const existingCount = versionsInWindow[version] ?? 0;\n        versionsInWindow[version] = existingCount + count!;\n      }\n    }\n  }\n\n  const topVersions = new Set(\n    Object.entries(versionsInWindow)\n      .sort((a, b) => a[1]! - b[1]!)\n      .slice(-n)\n      .map(([version, _count]) => version)\n  );\n\n  const filteredPoints: HistoryPoint[] = [];\n\n  for (const point of history.points) {\n    if (point.date >= earliestAllowableDate) {\n      const topVersionsOnDate = Object.keys(point.versionCounts).filter((v) =>\n        topVersions.has(v)\n      );\n\n      if (topVersionsOnDate.length > 0) {\n        const filteredPoint: HistoryPoint = {\n          date: point.date,\n          versionCounts: {},\n        };\n\n        for (const topVersion of topVersionsOnDate) {\n          filteredPoint.versionCounts[topVersion] =\n            point.versionCounts[topVersion];\n        }\n\n        filteredPoints.push(filteredPoint);\n      }\n    }\n  }\n\n  return {\n    versions: history.versions.filter((v) => topVersions.has(v)),\n    points: filteredPoints,\n  };\n}\n\nexport default VersionDownloadChart;\n","import type { Payload } from \"recharts/types/component/DefaultLegendContent\";\nimport styles from \"../styles/VersionLegend.module.scss\";\n\nimport { Text, ThemeContext } from \"@fluentui/react\";\nimport { colorForHue } from \"../chartColor\";\n\ntype CreateOptions = {\n  versionHues: Record<string, number>;\n};\n\nexport function createLegendContent(\n  opts: CreateOptions\n): React.FC<{ payload: Payload[] }> {\n  return ({ payload }) => {\n    return (\n      <ThemeContext.Consumer>\n        {(theme) => (\n          <div className={styles.versionsListContainer}>\n            <ul className={styles.versionsList}>\n              {payload.map((entry) => {\n                const colorChipColor = theme\n                  ? colorForHue(\n                      opts.versionHues[entry.value!],\n                      theme.isInverted\n                        ? { variant: \"dark\", targetLuminance: \"contrasts-dark\" }\n                        : {\n                            variant: \"light\",\n                            targetLuminance: \"contrasts-light\",\n                          }\n                    )\n                  : entry.color!;\n\n                return (\n                  <li key={entry.value} className={styles.versionsListItem}>\n                    <div\n                      className={styles.versionColorIndicator}\n                      style={{ backgroundColor: colorChipColor }}\n                    />\n                    <Text variant=\"small\" className={styles.versionLabel}>\n                      {entry.value}\n                    </Text>\n                  </li>\n                );\n              })}\n            </ul>\n          </div>\n        )}\n      </ThemeContext.Consumer>\n    );\n  };\n}\n"],"sourceRoot":""}